// Code generated by ent, DO NOT EDIT.

package plan

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldHasConflict holds the string denoting the has_conflict field in the database.
	FieldHasConflict = "has_conflict"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldTxt holds the string denoting the txt field in the database.
	FieldTxt = "txt"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgePrev holds the string denoting the prev edge name in mutations.
	EdgePrev = "prev"
	// EdgeNext holds the string denoting the next edge name in mutations.
	EdgeNext = "next"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "plans"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "charm_user"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_plans"
	// PrevTable is the table that holds the prev relation/edge.
	PrevTable = "plans"
	// PrevColumn is the table column denoting the prev relation/edge.
	PrevColumn = "plan_next"
	// NextTable is the table that holds the next relation/edge.
	NextTable = "plans"
	// NextColumn is the table column denoting the next relation/edge.
	NextColumn = "plan_next"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldHasConflict,
	FieldDigest,
	FieldTxt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_next",
	"user_plans",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
