// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/aakarim/pland/ent/arbitrarysection"
)

// ArbitrarySection is the model entity for the ArbitrarySection schema.
type ArbitrarySection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Txt holds the value of the "txt" field.
	Txt string `json:"txt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArbitrarySectionQuery when eager-loading is set.
	Edges ArbitrarySectionEdges `json:"edges"`
}

// ArbitrarySectionEdges holds the relations/edges for other nodes in the graph.
type ArbitrarySectionEdges struct {
	// Plan holds the value of the plan edge.
	Plan []*Plan `json:"plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPlan map[string][]*Plan
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading.
func (e ArbitrarySectionEdges) PlanOrErr() ([]*Plan, error) {
	if e.loadedTypes[0] {
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArbitrarySection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case arbitrarysection.FieldID:
			values[i] = new(sql.NullInt64)
		case arbitrarysection.FieldToken, arbitrarysection.FieldTxt:
			values[i] = new(sql.NullString)
		case arbitrarysection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ArbitrarySection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArbitrarySection fields.
func (as *ArbitrarySection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case arbitrarysection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case arbitrarysection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case arbitrarysection.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				as.Token = value.String
			}
		case arbitrarysection.FieldTxt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txt", values[i])
			} else if value.Valid {
				as.Txt = value.String
			}
		}
	}
	return nil
}

// QueryPlan queries the "plan" edge of the ArbitrarySection entity.
func (as *ArbitrarySection) QueryPlan() *PlanQuery {
	return (&ArbitrarySectionClient{config: as.config}).QueryPlan(as)
}

// Update returns a builder for updating this ArbitrarySection.
// Note that you need to call ArbitrarySection.Unwrap() before calling this method if this ArbitrarySection
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *ArbitrarySection) Update() *ArbitrarySectionUpdateOne {
	return (&ArbitrarySectionClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the ArbitrarySection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *ArbitrarySection) Unwrap() *ArbitrarySection {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArbitrarySection is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *ArbitrarySection) String() string {
	var builder strings.Builder
	builder.WriteString("ArbitrarySection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(as.Token)
	builder.WriteString(", ")
	builder.WriteString("txt=")
	builder.WriteString(as.Txt)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPlan returns the Plan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (as *ArbitrarySection) NamedPlan(name string) ([]*Plan, error) {
	if as.Edges.namedPlan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := as.Edges.namedPlan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (as *ArbitrarySection) appendNamedPlan(name string, edges ...*Plan) {
	if as.Edges.namedPlan == nil {
		as.Edges.namedPlan = make(map[string][]*Plan)
	}
	if len(edges) == 0 {
		as.Edges.namedPlan[name] = []*Plan{}
	} else {
		as.Edges.namedPlan[name] = append(as.Edges.namedPlan[name], edges...)
	}
}

// ArbitrarySections is a parsable slice of ArbitrarySection.
type ArbitrarySections []*ArbitrarySection

func (as ArbitrarySections) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
