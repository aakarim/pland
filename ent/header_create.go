// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aakarim/pland/ent/header"
	"github.com/aakarim/pland/ent/plan"
)

// HeaderCreate is the builder for creating a Header entity.
type HeaderCreate struct {
	config
	mutation *HeaderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (hc *HeaderCreate) SetCreatedAt(t time.Time) *HeaderCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HeaderCreate) SetNillableCreatedAt(t *time.Time) *HeaderCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetTxt sets the "txt" field.
func (hc *HeaderCreate) SetTxt(s string) *HeaderCreate {
	hc.mutation.SetTxt(s)
	return hc
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (hc *HeaderCreate) SetPlanID(id int) *HeaderCreate {
	hc.mutation.SetPlanID(id)
	return hc
}

// SetNillablePlanID sets the "plan" edge to the Plan entity by ID if the given value is not nil.
func (hc *HeaderCreate) SetNillablePlanID(id *int) *HeaderCreate {
	if id != nil {
		hc = hc.SetPlanID(*id)
	}
	return hc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (hc *HeaderCreate) SetPlan(p *Plan) *HeaderCreate {
	return hc.SetPlanID(p.ID)
}

// Mutation returns the HeaderMutation object of the builder.
func (hc *HeaderCreate) Mutation() *HeaderMutation {
	return hc.mutation
}

// Save creates the Header in the database.
func (hc *HeaderCreate) Save(ctx context.Context) (*Header, error) {
	var (
		err  error
		node *Header
	)
	hc.defaults()
	if len(hc.hooks) == 0 {
		if err = hc.check(); err != nil {
			return nil, err
		}
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hc.check(); err != nil {
				return nil, err
			}
			hc.mutation = mutation
			if node, err = hc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			if hc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Header)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HeaderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HeaderCreate) SaveX(ctx context.Context) *Header {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HeaderCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HeaderCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HeaderCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := header.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HeaderCreate) check() error {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Header.created_at"`)}
	}
	if _, ok := hc.mutation.Txt(); !ok {
		return &ValidationError{Name: "txt", err: errors.New(`ent: missing required field "Header.txt"`)}
	}
	return nil
}

func (hc *HeaderCreate) sqlSave(ctx context.Context) (*Header, error) {
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (hc *HeaderCreate) createSpec() (*Header, *sqlgraph.CreateSpec) {
	var (
		_node = &Header{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: header.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: header.FieldID,
			},
		}
	)
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: header.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.Txt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: header.FieldTxt,
		})
		_node.Txt = value
	}
	if nodes := hc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   header.PlanTable,
			Columns: []string{header.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_header = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HeaderCreateBulk is the builder for creating many Header entities in bulk.
type HeaderCreateBulk struct {
	config
	builders []*HeaderCreate
}

// Save creates the Header entities in the database.
func (hcb *HeaderCreateBulk) Save(ctx context.Context) ([]*Header, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Header, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HeaderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HeaderCreateBulk) SaveX(ctx context.Context) []*Header {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HeaderCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HeaderCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
