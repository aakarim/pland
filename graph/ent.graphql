directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type ArbitrarySection implements Node {
  id: ID!
  createdAt: Time!
  token: String!
  txt: String!
  plan: [Plan!]
}
"""Ordering options for ArbitrarySection connections"""
input ArbitrarySectionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ArbitrarySections."""
  field: ArbitrarySectionOrderField!
}
"""Properties by which ArbitrarySection connections can be ordered."""
enum ArbitrarySectionOrderField {
  CREATED_AT
}
"""
ArbitrarySectionWhereInput is used for filtering ArbitrarySection objects.
Input was generated by ent.
"""
input ArbitrarySectionWhereInput {
  not: ArbitrarySectionWhereInput
  and: [ArbitrarySectionWhereInput!]
  or: [ArbitrarySectionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """token field predicates"""
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """txt field predicates"""
  txt: String
  txtNEQ: String
  txtIn: [String!]
  txtNotIn: [String!]
  txtGT: String
  txtGTE: String
  txtLT: String
  txtLTE: String
  txtContains: String
  txtHasPrefix: String
  txtHasSuffix: String
  txtEqualFold: String
  txtContainsFold: String
  """plan edge predicates"""
  hasPlan: Boolean
  hasPlanWith: [PlanWhereInput!]
}
"""
CreatePlanInput is used for create Plan object.
Input was generated by ent.
"""
input CreatePlanInput {
  createdAt: Time!
  hasConflict: Boolean
  digest: String!
  txt: String!
  authorID: ID
  dayIDs: [ID!]
  arbitrarysectionIDs: [ID!]
  headerID: ID
  prevID: ID
  nextID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Day implements Node {
  id: ID!
  createdAt: Time!
  date: Time!
  txt: String!
  plan: [Plan!]
}
"""Ordering options for Day connections"""
input DayOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Days."""
  field: DayOrderField!
}
"""Properties by which Day connections can be ordered."""
enum DayOrderField {
  CREATED_AT
  DATE
}
"""
DayWhereInput is used for filtering Day objects.
Input was generated by ent.
"""
input DayWhereInput {
  not: DayWhereInput
  and: [DayWhereInput!]
  or: [DayWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """date field predicates"""
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """txt field predicates"""
  txt: String
  txtNEQ: String
  txtIn: [String!]
  txtNotIn: [String!]
  txtGT: String
  txtGTE: String
  txtLT: String
  txtLTE: String
  txtContains: String
  txtHasPrefix: String
  txtHasSuffix: String
  txtEqualFold: String
  txtContainsFold: String
  """plan edge predicates"""
  hasPlan: Boolean
  hasPlanWith: [PlanWhereInput!]
}
type Header implements Node {
  id: ID!
  createdAt: Time!
  txt: String!
  plan: Plan
}
"""Ordering options for Header connections"""
input HeaderOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Headers."""
  field: HeaderOrderField!
}
"""Properties by which Header connections can be ordered."""
enum HeaderOrderField {
  CREATED_AT
}
"""
HeaderWhereInput is used for filtering Header objects.
Input was generated by ent.
"""
input HeaderWhereInput {
  not: HeaderWhereInput
  and: [HeaderWhereInput!]
  or: [HeaderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """txt field predicates"""
  txt: String
  txtNEQ: String
  txtIn: [String!]
  txtNotIn: [String!]
  txtGT: String
  txtGTE: String
  txtLT: String
  txtLTE: String
  txtContains: String
  txtHasPrefix: String
  txtHasSuffix: String
  txtEqualFold: String
  txtContainsFold: String
  """plan edge predicates"""
  hasPlan: Boolean
  hasPlanWith: [PlanWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/aakarim/pland/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Plan implements Node {
  id: ID!
  createdAt: Time!
  hasConflict: Boolean!
  digest: String!
  txt: String!
  author: User
  days: [Day!]
  arbitrarysections: [ArbitrarySection!]
  header: Header
  prev: Plan
  next: Plan
}
"""A connection to a list of items."""
type PlanConnection {
  """A list of edges."""
  edges: [PlanEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PlanEdge {
  """The item at the end of the edge."""
  node: Plan
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Plan connections"""
input PlanOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Plans."""
  field: PlanOrderField!
}
"""Properties by which Plan connections can be ordered."""
enum PlanOrderField {
  CREATED_AT
}
"""
PlanWhereInput is used for filtering Plan objects.
Input was generated by ent.
"""
input PlanWhereInput {
  not: PlanWhereInput
  and: [PlanWhereInput!]
  or: [PlanWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """has_conflict field predicates"""
  hasConflict: Boolean
  hasConflictNEQ: Boolean
  """digest field predicates"""
  digest: String
  digestNEQ: String
  digestIn: [String!]
  digestNotIn: [String!]
  digestGT: String
  digestGTE: String
  digestLT: String
  digestLTE: String
  digestContains: String
  digestHasPrefix: String
  digestHasSuffix: String
  digestEqualFold: String
  digestContainsFold: String
  """txt field predicates"""
  txt: String
  txtNEQ: String
  txtIn: [String!]
  txtNotIn: [String!]
  txtGT: String
  txtGTE: String
  txtLT: String
  txtLTE: String
  txtContains: String
  txtHasPrefix: String
  txtHasSuffix: String
  txtEqualFold: String
  txtContainsFold: String
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
  """days edge predicates"""
  hasDays: Boolean
  hasDaysWith: [DayWhereInput!]
  """arbitrarySections edge predicates"""
  hasArbitrarySections: Boolean
  hasArbitrarySectionsWith: [ArbitrarySectionWhereInput!]
  """header edge predicates"""
  hasHeader: Boolean
  hasHeaderWith: [HeaderWhereInput!]
  """prev edge predicates"""
  hasPrev: Boolean
  hasPrevWith: [PlanWhereInput!]
  """next edge predicates"""
  hasNext: Boolean
  hasNextWith: [PlanWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
"""
UpdatePlanInput is used for update Plan object.
Input was generated by ent.
"""
input UpdatePlanInput {
  digest: String
  txt: String
  clearAuthor: Boolean
  authorID: ID
  addDayIDs: [ID!]
  removeDayIDs: [ID!]
  addArbitrarySectionIDs: [ID!]
  removeArbitrarySectionIDs: [ID!]
  clearHeader: Boolean
  headerID: ID
  clearPrev: Boolean
  prevID: ID
  clearNext: Boolean
  nextID: ID
}
type User implements Node {
  id: ID!
  charmID: UUID!
  name: String
  email: String
  bio: String
  createdAt: Time
  plans(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Plans returned from the connection."""
    orderBy: PlanOrder

    """Filtering options for Plans returned from the connection."""
    where: PlanWhereInput
  ): PlanConnection!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """charm_id field predicates"""
  charmID: UUID
  charmIDNEQ: UUID
  charmIDIn: [UUID!]
  charmIDNotIn: [UUID!]
  charmIDGT: UUID
  charmIDGTE: UUID
  charmIDLT: UUID
  charmIDLTE: UUID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """bio field predicates"""
  bio: String
  bioNEQ: String
  bioIn: [String!]
  bioNotIn: [String!]
  bioGT: String
  bioGTE: String
  bioLT: String
  bioLTE: String
  bioContains: String
  bioHasPrefix: String
  bioHasSuffix: String
  bioIsNil: Boolean
  bioNotNil: Boolean
  bioEqualFold: String
  bioContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """plans edge predicates"""
  hasPlans: Boolean
  hasPlansWith: [PlanWhereInput!]
}
