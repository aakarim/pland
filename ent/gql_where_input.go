// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/aakarim/pland/ent/plan"
	"github.com/aakarim/pland/ent/predicate"
	"github.com/aakarim/pland/ent/user"
	"github.com/google/uuid"
)

// PlanWhereInput represents a where input for filtering Plan queries.
type PlanWhereInput struct {
	Predicates []predicate.Plan  `json:"-"`
	Not        *PlanWhereInput   `json:"not,omitempty"`
	Or         []*PlanWhereInput `json:"or,omitempty"`
	And        []*PlanWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "has_conflict" field predicates.
	HasConflict    *bool `json:"hasConflict,omitempty"`
	HasConflictNEQ *bool `json:"hasConflictNEQ,omitempty"`

	// "digest" field predicates.
	Digest             *string  `json:"digest,omitempty"`
	DigestNEQ          *string  `json:"digestNEQ,omitempty"`
	DigestIn           []string `json:"digestIn,omitempty"`
	DigestNotIn        []string `json:"digestNotIn,omitempty"`
	DigestGT           *string  `json:"digestGT,omitempty"`
	DigestGTE          *string  `json:"digestGTE,omitempty"`
	DigestLT           *string  `json:"digestLT,omitempty"`
	DigestLTE          *string  `json:"digestLTE,omitempty"`
	DigestContains     *string  `json:"digestContains,omitempty"`
	DigestHasPrefix    *string  `json:"digestHasPrefix,omitempty"`
	DigestHasSuffix    *string  `json:"digestHasSuffix,omitempty"`
	DigestEqualFold    *string  `json:"digestEqualFold,omitempty"`
	DigestContainsFold *string  `json:"digestContainsFold,omitempty"`

	// "txt" field predicates.
	Txt             *string  `json:"txt,omitempty"`
	TxtNEQ          *string  `json:"txtNEQ,omitempty"`
	TxtIn           []string `json:"txtIn,omitempty"`
	TxtNotIn        []string `json:"txtNotIn,omitempty"`
	TxtGT           *string  `json:"txtGT,omitempty"`
	TxtGTE          *string  `json:"txtGTE,omitempty"`
	TxtLT           *string  `json:"txtLT,omitempty"`
	TxtLTE          *string  `json:"txtLTE,omitempty"`
	TxtContains     *string  `json:"txtContains,omitempty"`
	TxtHasPrefix    *string  `json:"txtHasPrefix,omitempty"`
	TxtHasSuffix    *string  `json:"txtHasSuffix,omitempty"`
	TxtEqualFold    *string  `json:"txtEqualFold,omitempty"`
	TxtContainsFold *string  `json:"txtContainsFold,omitempty"`

	// "author" edge predicates.
	HasAuthor     *bool             `json:"hasAuthor,omitempty"`
	HasAuthorWith []*UserWhereInput `json:"hasAuthorWith,omitempty"`

	// "prev" edge predicates.
	HasPrev     *bool             `json:"hasPrev,omitempty"`
	HasPrevWith []*PlanWhereInput `json:"hasPrevWith,omitempty"`

	// "next" edge predicates.
	HasNext     *bool             `json:"hasNext,omitempty"`
	HasNextWith []*PlanWhereInput `json:"hasNextWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PlanWhereInput) AddPredicates(predicates ...predicate.Plan) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PlanWhereInput filter on the PlanQuery builder.
func (i *PlanWhereInput) Filter(q *PlanQuery) (*PlanQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPlanWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPlanWhereInput is returned in case the PlanWhereInput is empty.
var ErrEmptyPlanWhereInput = errors.New("ent: empty predicate PlanWhereInput")

// P returns a predicate for filtering plans.
// An error is returned if the input is empty or invalid.
func (i *PlanWhereInput) P() (predicate.Plan, error) {
	var predicates []predicate.Plan
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, plan.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Plan, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, plan.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Plan, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, plan.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, plan.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, plan.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, plan.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, plan.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, plan.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, plan.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, plan.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, plan.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, plan.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, plan.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, plan.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, plan.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, plan.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, plan.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, plan.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, plan.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.HasConflict != nil {
		predicates = append(predicates, plan.HasConflictEQ(*i.HasConflict))
	}
	if i.HasConflictNEQ != nil {
		predicates = append(predicates, plan.HasConflictNEQ(*i.HasConflictNEQ))
	}
	if i.Digest != nil {
		predicates = append(predicates, plan.DigestEQ(*i.Digest))
	}
	if i.DigestNEQ != nil {
		predicates = append(predicates, plan.DigestNEQ(*i.DigestNEQ))
	}
	if len(i.DigestIn) > 0 {
		predicates = append(predicates, plan.DigestIn(i.DigestIn...))
	}
	if len(i.DigestNotIn) > 0 {
		predicates = append(predicates, plan.DigestNotIn(i.DigestNotIn...))
	}
	if i.DigestGT != nil {
		predicates = append(predicates, plan.DigestGT(*i.DigestGT))
	}
	if i.DigestGTE != nil {
		predicates = append(predicates, plan.DigestGTE(*i.DigestGTE))
	}
	if i.DigestLT != nil {
		predicates = append(predicates, plan.DigestLT(*i.DigestLT))
	}
	if i.DigestLTE != nil {
		predicates = append(predicates, plan.DigestLTE(*i.DigestLTE))
	}
	if i.DigestContains != nil {
		predicates = append(predicates, plan.DigestContains(*i.DigestContains))
	}
	if i.DigestHasPrefix != nil {
		predicates = append(predicates, plan.DigestHasPrefix(*i.DigestHasPrefix))
	}
	if i.DigestHasSuffix != nil {
		predicates = append(predicates, plan.DigestHasSuffix(*i.DigestHasSuffix))
	}
	if i.DigestEqualFold != nil {
		predicates = append(predicates, plan.DigestEqualFold(*i.DigestEqualFold))
	}
	if i.DigestContainsFold != nil {
		predicates = append(predicates, plan.DigestContainsFold(*i.DigestContainsFold))
	}
	if i.Txt != nil {
		predicates = append(predicates, plan.TxtEQ(*i.Txt))
	}
	if i.TxtNEQ != nil {
		predicates = append(predicates, plan.TxtNEQ(*i.TxtNEQ))
	}
	if len(i.TxtIn) > 0 {
		predicates = append(predicates, plan.TxtIn(i.TxtIn...))
	}
	if len(i.TxtNotIn) > 0 {
		predicates = append(predicates, plan.TxtNotIn(i.TxtNotIn...))
	}
	if i.TxtGT != nil {
		predicates = append(predicates, plan.TxtGT(*i.TxtGT))
	}
	if i.TxtGTE != nil {
		predicates = append(predicates, plan.TxtGTE(*i.TxtGTE))
	}
	if i.TxtLT != nil {
		predicates = append(predicates, plan.TxtLT(*i.TxtLT))
	}
	if i.TxtLTE != nil {
		predicates = append(predicates, plan.TxtLTE(*i.TxtLTE))
	}
	if i.TxtContains != nil {
		predicates = append(predicates, plan.TxtContains(*i.TxtContains))
	}
	if i.TxtHasPrefix != nil {
		predicates = append(predicates, plan.TxtHasPrefix(*i.TxtHasPrefix))
	}
	if i.TxtHasSuffix != nil {
		predicates = append(predicates, plan.TxtHasSuffix(*i.TxtHasSuffix))
	}
	if i.TxtEqualFold != nil {
		predicates = append(predicates, plan.TxtEqualFold(*i.TxtEqualFold))
	}
	if i.TxtContainsFold != nil {
		predicates = append(predicates, plan.TxtContainsFold(*i.TxtContainsFold))
	}

	if i.HasAuthor != nil {
		p := plan.HasAuthor()
		if !*i.HasAuthor {
			p = plan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasAuthorWith))
		for _, w := range i.HasAuthorWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthorWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, plan.HasAuthorWith(with...))
	}
	if i.HasPrev != nil {
		p := plan.HasPrev()
		if !*i.HasPrev {
			p = plan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPrevWith) > 0 {
		with := make([]predicate.Plan, 0, len(i.HasPrevWith))
		for _, w := range i.HasPrevWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPrevWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, plan.HasPrevWith(with...))
	}
	if i.HasNext != nil {
		p := plan.HasNext()
		if !*i.HasNext {
			p = plan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasNextWith) > 0 {
		with := make([]predicate.Plan, 0, len(i.HasNextWith))
		for _, w := range i.HasNextWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasNextWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, plan.HasNextWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPlanWhereInput
	case 1:
		return predicates[0], nil
	default:
		return plan.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "charm_id" field predicates.
	CharmID      *uuid.UUID  `json:"charmID,omitempty"`
	CharmIDNEQ   *uuid.UUID  `json:"charmIDNEQ,omitempty"`
	CharmIDIn    []uuid.UUID `json:"charmIDIn,omitempty"`
	CharmIDNotIn []uuid.UUID `json:"charmIDNotIn,omitempty"`
	CharmIDGT    *uuid.UUID  `json:"charmIDGT,omitempty"`
	CharmIDGTE   *uuid.UUID  `json:"charmIDGTE,omitempty"`
	CharmIDLT    *uuid.UUID  `json:"charmIDLT,omitempty"`
	CharmIDLTE   *uuid.UUID  `json:"charmIDLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "bio" field predicates.
	Bio             *string  `json:"bio,omitempty"`
	BioNEQ          *string  `json:"bioNEQ,omitempty"`
	BioIn           []string `json:"bioIn,omitempty"`
	BioNotIn        []string `json:"bioNotIn,omitempty"`
	BioGT           *string  `json:"bioGT,omitempty"`
	BioGTE          *string  `json:"bioGTE,omitempty"`
	BioLT           *string  `json:"bioLT,omitempty"`
	BioLTE          *string  `json:"bioLTE,omitempty"`
	BioContains     *string  `json:"bioContains,omitempty"`
	BioHasPrefix    *string  `json:"bioHasPrefix,omitempty"`
	BioHasSuffix    *string  `json:"bioHasSuffix,omitempty"`
	BioIsNil        bool     `json:"bioIsNil,omitempty"`
	BioNotNil       bool     `json:"bioNotNil,omitempty"`
	BioEqualFold    *string  `json:"bioEqualFold,omitempty"`
	BioContainsFold *string  `json:"bioContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "plans" edge predicates.
	HasPlans     *bool             `json:"hasPlans,omitempty"`
	HasPlansWith []*PlanWhereInput `json:"hasPlansWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CharmID != nil {
		predicates = append(predicates, user.CharmIDEQ(*i.CharmID))
	}
	if i.CharmIDNEQ != nil {
		predicates = append(predicates, user.CharmIDNEQ(*i.CharmIDNEQ))
	}
	if len(i.CharmIDIn) > 0 {
		predicates = append(predicates, user.CharmIDIn(i.CharmIDIn...))
	}
	if len(i.CharmIDNotIn) > 0 {
		predicates = append(predicates, user.CharmIDNotIn(i.CharmIDNotIn...))
	}
	if i.CharmIDGT != nil {
		predicates = append(predicates, user.CharmIDGT(*i.CharmIDGT))
	}
	if i.CharmIDGTE != nil {
		predicates = append(predicates, user.CharmIDGTE(*i.CharmIDGTE))
	}
	if i.CharmIDLT != nil {
		predicates = append(predicates, user.CharmIDLT(*i.CharmIDLT))
	}
	if i.CharmIDLTE != nil {
		predicates = append(predicates, user.CharmIDLTE(*i.CharmIDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, user.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, user.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, user.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, user.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Bio != nil {
		predicates = append(predicates, user.BioEQ(*i.Bio))
	}
	if i.BioNEQ != nil {
		predicates = append(predicates, user.BioNEQ(*i.BioNEQ))
	}
	if len(i.BioIn) > 0 {
		predicates = append(predicates, user.BioIn(i.BioIn...))
	}
	if len(i.BioNotIn) > 0 {
		predicates = append(predicates, user.BioNotIn(i.BioNotIn...))
	}
	if i.BioGT != nil {
		predicates = append(predicates, user.BioGT(*i.BioGT))
	}
	if i.BioGTE != nil {
		predicates = append(predicates, user.BioGTE(*i.BioGTE))
	}
	if i.BioLT != nil {
		predicates = append(predicates, user.BioLT(*i.BioLT))
	}
	if i.BioLTE != nil {
		predicates = append(predicates, user.BioLTE(*i.BioLTE))
	}
	if i.BioContains != nil {
		predicates = append(predicates, user.BioContains(*i.BioContains))
	}
	if i.BioHasPrefix != nil {
		predicates = append(predicates, user.BioHasPrefix(*i.BioHasPrefix))
	}
	if i.BioHasSuffix != nil {
		predicates = append(predicates, user.BioHasSuffix(*i.BioHasSuffix))
	}
	if i.BioIsNil {
		predicates = append(predicates, user.BioIsNil())
	}
	if i.BioNotNil {
		predicates = append(predicates, user.BioNotNil())
	}
	if i.BioEqualFold != nil {
		predicates = append(predicates, user.BioEqualFold(*i.BioEqualFold))
	}
	if i.BioContainsFold != nil {
		predicates = append(predicates, user.BioContainsFold(*i.BioContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, user.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, user.CreatedAtNotNil())
	}

	if i.HasPlans != nil {
		p := user.HasPlans()
		if !*i.HasPlans {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPlansWith) > 0 {
		with := make([]predicate.Plan, 0, len(i.HasPlansWith))
		for _, w := range i.HasPlansWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPlansWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPlansWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
