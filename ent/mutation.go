// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/aakarim/pland/ent/arbitrarysection"
	"github.com/aakarim/pland/ent/day"
	"github.com/aakarim/pland/ent/header"
	"github.com/aakarim/pland/ent/plan"
	"github.com/aakarim/pland/ent/predicate"
	"github.com/aakarim/pland/ent/user"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArbitrarySection = "ArbitrarySection"
	TypeDay              = "Day"
	TypeHeader           = "Header"
	TypePlan             = "Plan"
	TypeUser             = "User"
)

// ArbitrarySectionMutation represents an operation that mutates the ArbitrarySection nodes in the graph.
type ArbitrarySectionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	token         *string
	txt           *string
	clearedFields map[string]struct{}
	plan          map[int]struct{}
	removedplan   map[int]struct{}
	clearedplan   bool
	done          bool
	oldValue      func(context.Context) (*ArbitrarySection, error)
	predicates    []predicate.ArbitrarySection
}

var _ ent.Mutation = (*ArbitrarySectionMutation)(nil)

// arbitrarysectionOption allows management of the mutation configuration using functional options.
type arbitrarysectionOption func(*ArbitrarySectionMutation)

// newArbitrarySectionMutation creates new mutation for the ArbitrarySection entity.
func newArbitrarySectionMutation(c config, op Op, opts ...arbitrarysectionOption) *ArbitrarySectionMutation {
	m := &ArbitrarySectionMutation{
		config:        c,
		op:            op,
		typ:           TypeArbitrarySection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArbitrarySectionID sets the ID field of the mutation.
func withArbitrarySectionID(id int) arbitrarysectionOption {
	return func(m *ArbitrarySectionMutation) {
		var (
			err   error
			once  sync.Once
			value *ArbitrarySection
		)
		m.oldValue = func(ctx context.Context) (*ArbitrarySection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ArbitrarySection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArbitrarySection sets the old ArbitrarySection of the mutation.
func withArbitrarySection(node *ArbitrarySection) arbitrarysectionOption {
	return func(m *ArbitrarySectionMutation) {
		m.oldValue = func(context.Context) (*ArbitrarySection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArbitrarySectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArbitrarySectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArbitrarySectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArbitrarySectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ArbitrarySection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ArbitrarySectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ArbitrarySectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ArbitrarySection entity.
// If the ArbitrarySection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArbitrarySectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ArbitrarySectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetToken sets the "token" field.
func (m *ArbitrarySectionMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ArbitrarySectionMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ArbitrarySection entity.
// If the ArbitrarySection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArbitrarySectionMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ArbitrarySectionMutation) ResetToken() {
	m.token = nil
}

// SetTxt sets the "txt" field.
func (m *ArbitrarySectionMutation) SetTxt(s string) {
	m.txt = &s
}

// Txt returns the value of the "txt" field in the mutation.
func (m *ArbitrarySectionMutation) Txt() (r string, exists bool) {
	v := m.txt
	if v == nil {
		return
	}
	return *v, true
}

// OldTxt returns the old "txt" field's value of the ArbitrarySection entity.
// If the ArbitrarySection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArbitrarySectionMutation) OldTxt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxt: %w", err)
	}
	return oldValue.Txt, nil
}

// ResetTxt resets all changes to the "txt" field.
func (m *ArbitrarySectionMutation) ResetTxt() {
	m.txt = nil
}

// AddPlanIDs adds the "plan" edge to the Plan entity by ids.
func (m *ArbitrarySectionMutation) AddPlanIDs(ids ...int) {
	if m.plan == nil {
		m.plan = make(map[int]struct{})
	}
	for i := range ids {
		m.plan[ids[i]] = struct{}{}
	}
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *ArbitrarySectionMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *ArbitrarySectionMutation) PlanCleared() bool {
	return m.clearedplan
}

// RemovePlanIDs removes the "plan" edge to the Plan entity by IDs.
func (m *ArbitrarySectionMutation) RemovePlanIDs(ids ...int) {
	if m.removedplan == nil {
		m.removedplan = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.plan, ids[i])
		m.removedplan[ids[i]] = struct{}{}
	}
}

// RemovedPlan returns the removed IDs of the "plan" edge to the Plan entity.
func (m *ArbitrarySectionMutation) RemovedPlanIDs() (ids []int) {
	for id := range m.removedplan {
		ids = append(ids, id)
	}
	return
}

// PlanIDs returns the "plan" edge IDs in the mutation.
func (m *ArbitrarySectionMutation) PlanIDs() (ids []int) {
	for id := range m.plan {
		ids = append(ids, id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *ArbitrarySectionMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
	m.removedplan = nil
}

// Where appends a list predicates to the ArbitrarySectionMutation builder.
func (m *ArbitrarySectionMutation) Where(ps ...predicate.ArbitrarySection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArbitrarySectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ArbitrarySection).
func (m *ArbitrarySectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArbitrarySectionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, arbitrarysection.FieldCreatedAt)
	}
	if m.token != nil {
		fields = append(fields, arbitrarysection.FieldToken)
	}
	if m.txt != nil {
		fields = append(fields, arbitrarysection.FieldTxt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArbitrarySectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case arbitrarysection.FieldCreatedAt:
		return m.CreatedAt()
	case arbitrarysection.FieldToken:
		return m.Token()
	case arbitrarysection.FieldTxt:
		return m.Txt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArbitrarySectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case arbitrarysection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case arbitrarysection.FieldToken:
		return m.OldToken(ctx)
	case arbitrarysection.FieldTxt:
		return m.OldTxt(ctx)
	}
	return nil, fmt.Errorf("unknown ArbitrarySection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArbitrarySectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case arbitrarysection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case arbitrarysection.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case arbitrarysection.FieldTxt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxt(v)
		return nil
	}
	return fmt.Errorf("unknown ArbitrarySection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArbitrarySectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArbitrarySectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArbitrarySectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ArbitrarySection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArbitrarySectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArbitrarySectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArbitrarySectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ArbitrarySection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArbitrarySectionMutation) ResetField(name string) error {
	switch name {
	case arbitrarysection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case arbitrarysection.FieldToken:
		m.ResetToken()
		return nil
	case arbitrarysection.FieldTxt:
		m.ResetTxt()
		return nil
	}
	return fmt.Errorf("unknown ArbitrarySection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArbitrarySectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.plan != nil {
		edges = append(edges, arbitrarysection.EdgePlan)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArbitrarySectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case arbitrarysection.EdgePlan:
		ids := make([]ent.Value, 0, len(m.plan))
		for id := range m.plan {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArbitrarySectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplan != nil {
		edges = append(edges, arbitrarysection.EdgePlan)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArbitrarySectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case arbitrarysection.EdgePlan:
		ids := make([]ent.Value, 0, len(m.removedplan))
		for id := range m.removedplan {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArbitrarySectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplan {
		edges = append(edges, arbitrarysection.EdgePlan)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArbitrarySectionMutation) EdgeCleared(name string) bool {
	switch name {
	case arbitrarysection.EdgePlan:
		return m.clearedplan
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArbitrarySectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ArbitrarySection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArbitrarySectionMutation) ResetEdge(name string) error {
	switch name {
	case arbitrarysection.EdgePlan:
		m.ResetPlan()
		return nil
	}
	return fmt.Errorf("unknown ArbitrarySection edge %s", name)
}

// DayMutation represents an operation that mutates the Day nodes in the graph.
type DayMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	date          *time.Time
	txt           *string
	clearedFields map[string]struct{}
	plan          map[int]struct{}
	removedplan   map[int]struct{}
	clearedplan   bool
	done          bool
	oldValue      func(context.Context) (*Day, error)
	predicates    []predicate.Day
}

var _ ent.Mutation = (*DayMutation)(nil)

// dayOption allows management of the mutation configuration using functional options.
type dayOption func(*DayMutation)

// newDayMutation creates new mutation for the Day entity.
func newDayMutation(c config, op Op, opts ...dayOption) *DayMutation {
	m := &DayMutation{
		config:        c,
		op:            op,
		typ:           TypeDay,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDayID sets the ID field of the mutation.
func withDayID(id int) dayOption {
	return func(m *DayMutation) {
		var (
			err   error
			once  sync.Once
			value *Day
		)
		m.oldValue = func(ctx context.Context) (*Day, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Day.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDay sets the old Day of the mutation.
func withDay(node *Day) dayOption {
	return func(m *DayMutation) {
		m.oldValue = func(context.Context) (*Day, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DayMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DayMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Day.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DayMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DayMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Day entity.
// If the Day object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DayMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DayMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDate sets the "date" field.
func (m *DayMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DayMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Day entity.
// If the Day object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DayMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DayMutation) ResetDate() {
	m.date = nil
}

// SetTxt sets the "txt" field.
func (m *DayMutation) SetTxt(s string) {
	m.txt = &s
}

// Txt returns the value of the "txt" field in the mutation.
func (m *DayMutation) Txt() (r string, exists bool) {
	v := m.txt
	if v == nil {
		return
	}
	return *v, true
}

// OldTxt returns the old "txt" field's value of the Day entity.
// If the Day object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DayMutation) OldTxt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxt: %w", err)
	}
	return oldValue.Txt, nil
}

// ResetTxt resets all changes to the "txt" field.
func (m *DayMutation) ResetTxt() {
	m.txt = nil
}

// AddPlanIDs adds the "plan" edge to the Plan entity by ids.
func (m *DayMutation) AddPlanIDs(ids ...int) {
	if m.plan == nil {
		m.plan = make(map[int]struct{})
	}
	for i := range ids {
		m.plan[ids[i]] = struct{}{}
	}
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *DayMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *DayMutation) PlanCleared() bool {
	return m.clearedplan
}

// RemovePlanIDs removes the "plan" edge to the Plan entity by IDs.
func (m *DayMutation) RemovePlanIDs(ids ...int) {
	if m.removedplan == nil {
		m.removedplan = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.plan, ids[i])
		m.removedplan[ids[i]] = struct{}{}
	}
}

// RemovedPlan returns the removed IDs of the "plan" edge to the Plan entity.
func (m *DayMutation) RemovedPlanIDs() (ids []int) {
	for id := range m.removedplan {
		ids = append(ids, id)
	}
	return
}

// PlanIDs returns the "plan" edge IDs in the mutation.
func (m *DayMutation) PlanIDs() (ids []int) {
	for id := range m.plan {
		ids = append(ids, id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *DayMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
	m.removedplan = nil
}

// Where appends a list predicates to the DayMutation builder.
func (m *DayMutation) Where(ps ...predicate.Day) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DayMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Day).
func (m *DayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DayMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, day.FieldCreatedAt)
	}
	if m.date != nil {
		fields = append(fields, day.FieldDate)
	}
	if m.txt != nil {
		fields = append(fields, day.FieldTxt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case day.FieldCreatedAt:
		return m.CreatedAt()
	case day.FieldDate:
		return m.Date()
	case day.FieldTxt:
		return m.Txt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case day.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case day.FieldDate:
		return m.OldDate(ctx)
	case day.FieldTxt:
		return m.OldTxt(ctx)
	}
	return nil, fmt.Errorf("unknown Day field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case day.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case day.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case day.FieldTxt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxt(v)
		return nil
	}
	return fmt.Errorf("unknown Day field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DayMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DayMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DayMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Day numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DayMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DayMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Day nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DayMutation) ResetField(name string) error {
	switch name {
	case day.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case day.FieldDate:
		m.ResetDate()
		return nil
	case day.FieldTxt:
		m.ResetTxt()
		return nil
	}
	return fmt.Errorf("unknown Day field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DayMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.plan != nil {
		edges = append(edges, day.EdgePlan)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DayMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case day.EdgePlan:
		ids := make([]ent.Value, 0, len(m.plan))
		for id := range m.plan {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplan != nil {
		edges = append(edges, day.EdgePlan)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DayMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case day.EdgePlan:
		ids := make([]ent.Value, 0, len(m.removedplan))
		for id := range m.removedplan {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplan {
		edges = append(edges, day.EdgePlan)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DayMutation) EdgeCleared(name string) bool {
	switch name {
	case day.EdgePlan:
		return m.clearedplan
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DayMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Day unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DayMutation) ResetEdge(name string) error {
	switch name {
	case day.EdgePlan:
		m.ResetPlan()
		return nil
	}
	return fmt.Errorf("unknown Day edge %s", name)
}

// HeaderMutation represents an operation that mutates the Header nodes in the graph.
type HeaderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	txt           *string
	clearedFields map[string]struct{}
	plan          *int
	clearedplan   bool
	done          bool
	oldValue      func(context.Context) (*Header, error)
	predicates    []predicate.Header
}

var _ ent.Mutation = (*HeaderMutation)(nil)

// headerOption allows management of the mutation configuration using functional options.
type headerOption func(*HeaderMutation)

// newHeaderMutation creates new mutation for the Header entity.
func newHeaderMutation(c config, op Op, opts ...headerOption) *HeaderMutation {
	m := &HeaderMutation{
		config:        c,
		op:            op,
		typ:           TypeHeader,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHeaderID sets the ID field of the mutation.
func withHeaderID(id int) headerOption {
	return func(m *HeaderMutation) {
		var (
			err   error
			once  sync.Once
			value *Header
		)
		m.oldValue = func(ctx context.Context) (*Header, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Header.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHeader sets the old Header of the mutation.
func withHeader(node *Header) headerOption {
	return func(m *HeaderMutation) {
		m.oldValue = func(context.Context) (*Header, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HeaderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HeaderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HeaderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HeaderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Header.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *HeaderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HeaderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HeaderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetTxt sets the "txt" field.
func (m *HeaderMutation) SetTxt(s string) {
	m.txt = &s
}

// Txt returns the value of the "txt" field in the mutation.
func (m *HeaderMutation) Txt() (r string, exists bool) {
	v := m.txt
	if v == nil {
		return
	}
	return *v, true
}

// OldTxt returns the old "txt" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldTxt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxt: %w", err)
	}
	return oldValue.Txt, nil
}

// ResetTxt resets all changes to the "txt" field.
func (m *HeaderMutation) ResetTxt() {
	m.txt = nil
}

// SetPlanID sets the "plan" edge to the Plan entity by id.
func (m *HeaderMutation) SetPlanID(id int) {
	m.plan = &id
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *HeaderMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *HeaderMutation) PlanCleared() bool {
	return m.clearedplan
}

// PlanID returns the "plan" edge ID in the mutation.
func (m *HeaderMutation) PlanID() (id int, exists bool) {
	if m.plan != nil {
		return *m.plan, true
	}
	return
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *HeaderMutation) PlanIDs() (ids []int) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *HeaderMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// Where appends a list predicates to the HeaderMutation builder.
func (m *HeaderMutation) Where(ps ...predicate.Header) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HeaderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Header).
func (m *HeaderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HeaderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, header.FieldCreatedAt)
	}
	if m.txt != nil {
		fields = append(fields, header.FieldTxt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HeaderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case header.FieldCreatedAt:
		return m.CreatedAt()
	case header.FieldTxt:
		return m.Txt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HeaderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case header.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case header.FieldTxt:
		return m.OldTxt(ctx)
	}
	return nil, fmt.Errorf("unknown Header field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeaderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case header.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case header.FieldTxt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxt(v)
		return nil
	}
	return fmt.Errorf("unknown Header field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HeaderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HeaderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeaderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Header numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HeaderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HeaderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HeaderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Header nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HeaderMutation) ResetField(name string) error {
	switch name {
	case header.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case header.FieldTxt:
		m.ResetTxt()
		return nil
	}
	return fmt.Errorf("unknown Header field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HeaderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.plan != nil {
		edges = append(edges, header.EdgePlan)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HeaderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case header.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HeaderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HeaderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HeaderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplan {
		edges = append(edges, header.EdgePlan)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HeaderMutation) EdgeCleared(name string) bool {
	switch name {
	case header.EdgePlan:
		return m.clearedplan
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HeaderMutation) ClearEdge(name string) error {
	switch name {
	case header.EdgePlan:
		m.ClearPlan()
		return nil
	}
	return fmt.Errorf("unknown Header unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HeaderMutation) ResetEdge(name string) error {
	switch name {
	case header.EdgePlan:
		m.ResetPlan()
		return nil
	}
	return fmt.Errorf("unknown Header edge %s", name)
}

// PlanMutation represents an operation that mutates the Plan nodes in the graph.
type PlanMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	created_at               *time.Time
	has_conflict             *bool
	digest                   *string
	txt                      *string
	clearedFields            map[string]struct{}
	author                   *int
	clearedauthor            bool
	days                     map[int]struct{}
	removeddays              map[int]struct{}
	cleareddays              bool
	arbitrarySections        map[int]struct{}
	removedarbitrarySections map[int]struct{}
	clearedarbitrarySections bool
	header                   *int
	clearedheader            bool
	prev                     *int
	clearedprev              bool
	next                     *int
	clearednext              bool
	done                     bool
	oldValue                 func(context.Context) (*Plan, error)
	predicates               []predicate.Plan
}

var _ ent.Mutation = (*PlanMutation)(nil)

// planOption allows management of the mutation configuration using functional options.
type planOption func(*PlanMutation)

// newPlanMutation creates new mutation for the Plan entity.
func newPlanMutation(c config, op Op, opts ...planOption) *PlanMutation {
	m := &PlanMutation{
		config:        c,
		op:            op,
		typ:           TypePlan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlanID sets the ID field of the mutation.
func withPlanID(id int) planOption {
	return func(m *PlanMutation) {
		var (
			err   error
			once  sync.Once
			value *Plan
		)
		m.oldValue = func(ctx context.Context) (*Plan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Plan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlan sets the old Plan of the mutation.
func withPlan(node *Plan) planOption {
	return func(m *PlanMutation) {
		m.oldValue = func(context.Context) (*Plan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlanMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlanMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Plan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PlanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetHasConflict sets the "has_conflict" field.
func (m *PlanMutation) SetHasConflict(b bool) {
	m.has_conflict = &b
}

// HasConflict returns the value of the "has_conflict" field in the mutation.
func (m *PlanMutation) HasConflict() (r bool, exists bool) {
	v := m.has_conflict
	if v == nil {
		return
	}
	return *v, true
}

// OldHasConflict returns the old "has_conflict" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldHasConflict(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasConflict is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasConflict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasConflict: %w", err)
	}
	return oldValue.HasConflict, nil
}

// ResetHasConflict resets all changes to the "has_conflict" field.
func (m *PlanMutation) ResetHasConflict() {
	m.has_conflict = nil
}

// SetDigest sets the "digest" field.
func (m *PlanMutation) SetDigest(s string) {
	m.digest = &s
}

// Digest returns the value of the "digest" field in the mutation.
func (m *PlanMutation) Digest() (r string, exists bool) {
	v := m.digest
	if v == nil {
		return
	}
	return *v, true
}

// OldDigest returns the old "digest" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDigest: %w", err)
	}
	return oldValue.Digest, nil
}

// ResetDigest resets all changes to the "digest" field.
func (m *PlanMutation) ResetDigest() {
	m.digest = nil
}

// SetTxt sets the "txt" field.
func (m *PlanMutation) SetTxt(s string) {
	m.txt = &s
}

// Txt returns the value of the "txt" field in the mutation.
func (m *PlanMutation) Txt() (r string, exists bool) {
	v := m.txt
	if v == nil {
		return
	}
	return *v, true
}

// OldTxt returns the old "txt" field's value of the Plan entity.
// If the Plan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanMutation) OldTxt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxt: %w", err)
	}
	return oldValue.Txt, nil
}

// ResetTxt resets all changes to the "txt" field.
func (m *PlanMutation) ResetTxt() {
	m.txt = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *PlanMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *PlanMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *PlanMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *PlanMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *PlanMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *PlanMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddDayIDs adds the "days" edge to the Day entity by ids.
func (m *PlanMutation) AddDayIDs(ids ...int) {
	if m.days == nil {
		m.days = make(map[int]struct{})
	}
	for i := range ids {
		m.days[ids[i]] = struct{}{}
	}
}

// ClearDays clears the "days" edge to the Day entity.
func (m *PlanMutation) ClearDays() {
	m.cleareddays = true
}

// DaysCleared reports if the "days" edge to the Day entity was cleared.
func (m *PlanMutation) DaysCleared() bool {
	return m.cleareddays
}

// RemoveDayIDs removes the "days" edge to the Day entity by IDs.
func (m *PlanMutation) RemoveDayIDs(ids ...int) {
	if m.removeddays == nil {
		m.removeddays = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.days, ids[i])
		m.removeddays[ids[i]] = struct{}{}
	}
}

// RemovedDays returns the removed IDs of the "days" edge to the Day entity.
func (m *PlanMutation) RemovedDaysIDs() (ids []int) {
	for id := range m.removeddays {
		ids = append(ids, id)
	}
	return
}

// DaysIDs returns the "days" edge IDs in the mutation.
func (m *PlanMutation) DaysIDs() (ids []int) {
	for id := range m.days {
		ids = append(ids, id)
	}
	return
}

// ResetDays resets all changes to the "days" edge.
func (m *PlanMutation) ResetDays() {
	m.days = nil
	m.cleareddays = false
	m.removeddays = nil
}

// AddArbitrarySectionIDs adds the "arbitrarySections" edge to the ArbitrarySection entity by ids.
func (m *PlanMutation) AddArbitrarySectionIDs(ids ...int) {
	if m.arbitrarySections == nil {
		m.arbitrarySections = make(map[int]struct{})
	}
	for i := range ids {
		m.arbitrarySections[ids[i]] = struct{}{}
	}
}

// ClearArbitrarySections clears the "arbitrarySections" edge to the ArbitrarySection entity.
func (m *PlanMutation) ClearArbitrarySections() {
	m.clearedarbitrarySections = true
}

// ArbitrarySectionsCleared reports if the "arbitrarySections" edge to the ArbitrarySection entity was cleared.
func (m *PlanMutation) ArbitrarySectionsCleared() bool {
	return m.clearedarbitrarySections
}

// RemoveArbitrarySectionIDs removes the "arbitrarySections" edge to the ArbitrarySection entity by IDs.
func (m *PlanMutation) RemoveArbitrarySectionIDs(ids ...int) {
	if m.removedarbitrarySections == nil {
		m.removedarbitrarySections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.arbitrarySections, ids[i])
		m.removedarbitrarySections[ids[i]] = struct{}{}
	}
}

// RemovedArbitrarySections returns the removed IDs of the "arbitrarySections" edge to the ArbitrarySection entity.
func (m *PlanMutation) RemovedArbitrarySectionsIDs() (ids []int) {
	for id := range m.removedarbitrarySections {
		ids = append(ids, id)
	}
	return
}

// ArbitrarySectionsIDs returns the "arbitrarySections" edge IDs in the mutation.
func (m *PlanMutation) ArbitrarySectionsIDs() (ids []int) {
	for id := range m.arbitrarySections {
		ids = append(ids, id)
	}
	return
}

// ResetArbitrarySections resets all changes to the "arbitrarySections" edge.
func (m *PlanMutation) ResetArbitrarySections() {
	m.arbitrarySections = nil
	m.clearedarbitrarySections = false
	m.removedarbitrarySections = nil
}

// SetHeaderID sets the "header" edge to the Header entity by id.
func (m *PlanMutation) SetHeaderID(id int) {
	m.header = &id
}

// ClearHeader clears the "header" edge to the Header entity.
func (m *PlanMutation) ClearHeader() {
	m.clearedheader = true
}

// HeaderCleared reports if the "header" edge to the Header entity was cleared.
func (m *PlanMutation) HeaderCleared() bool {
	return m.clearedheader
}

// HeaderID returns the "header" edge ID in the mutation.
func (m *PlanMutation) HeaderID() (id int, exists bool) {
	if m.header != nil {
		return *m.header, true
	}
	return
}

// HeaderIDs returns the "header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeaderID instead. It exists only for internal usage by the builders.
func (m *PlanMutation) HeaderIDs() (ids []int) {
	if id := m.header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeader resets all changes to the "header" edge.
func (m *PlanMutation) ResetHeader() {
	m.header = nil
	m.clearedheader = false
}

// SetPrevID sets the "prev" edge to the Plan entity by id.
func (m *PlanMutation) SetPrevID(id int) {
	m.prev = &id
}

// ClearPrev clears the "prev" edge to the Plan entity.
func (m *PlanMutation) ClearPrev() {
	m.clearedprev = true
}

// PrevCleared reports if the "prev" edge to the Plan entity was cleared.
func (m *PlanMutation) PrevCleared() bool {
	return m.clearedprev
}

// PrevID returns the "prev" edge ID in the mutation.
func (m *PlanMutation) PrevID() (id int, exists bool) {
	if m.prev != nil {
		return *m.prev, true
	}
	return
}

// PrevIDs returns the "prev" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrevID instead. It exists only for internal usage by the builders.
func (m *PlanMutation) PrevIDs() (ids []int) {
	if id := m.prev; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrev resets all changes to the "prev" edge.
func (m *PlanMutation) ResetPrev() {
	m.prev = nil
	m.clearedprev = false
}

// SetNextID sets the "next" edge to the Plan entity by id.
func (m *PlanMutation) SetNextID(id int) {
	m.next = &id
}

// ClearNext clears the "next" edge to the Plan entity.
func (m *PlanMutation) ClearNext() {
	m.clearednext = true
}

// NextCleared reports if the "next" edge to the Plan entity was cleared.
func (m *PlanMutation) NextCleared() bool {
	return m.clearednext
}

// NextID returns the "next" edge ID in the mutation.
func (m *PlanMutation) NextID() (id int, exists bool) {
	if m.next != nil {
		return *m.next, true
	}
	return
}

// NextIDs returns the "next" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NextID instead. It exists only for internal usage by the builders.
func (m *PlanMutation) NextIDs() (ids []int) {
	if id := m.next; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNext resets all changes to the "next" edge.
func (m *PlanMutation) ResetNext() {
	m.next = nil
	m.clearednext = false
}

// Where appends a list predicates to the PlanMutation builder.
func (m *PlanMutation) Where(ps ...predicate.Plan) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Plan).
func (m *PlanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlanMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, plan.FieldCreatedAt)
	}
	if m.has_conflict != nil {
		fields = append(fields, plan.FieldHasConflict)
	}
	if m.digest != nil {
		fields = append(fields, plan.FieldDigest)
	}
	if m.txt != nil {
		fields = append(fields, plan.FieldTxt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case plan.FieldCreatedAt:
		return m.CreatedAt()
	case plan.FieldHasConflict:
		return m.HasConflict()
	case plan.FieldDigest:
		return m.Digest()
	case plan.FieldTxt:
		return m.Txt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case plan.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case plan.FieldHasConflict:
		return m.OldHasConflict(ctx)
	case plan.FieldDigest:
		return m.OldDigest(ctx)
	case plan.FieldTxt:
		return m.OldTxt(ctx)
	}
	return nil, fmt.Errorf("unknown Plan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case plan.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case plan.FieldHasConflict:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasConflict(v)
		return nil
	case plan.FieldDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDigest(v)
		return nil
	case plan.FieldTxt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxt(v)
		return nil
	}
	return fmt.Errorf("unknown Plan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Plan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlanMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlanMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Plan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlanMutation) ResetField(name string) error {
	switch name {
	case plan.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case plan.FieldHasConflict:
		m.ResetHasConflict()
		return nil
	case plan.FieldDigest:
		m.ResetDigest()
		return nil
	case plan.FieldTxt:
		m.ResetTxt()
		return nil
	}
	return fmt.Errorf("unknown Plan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlanMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.author != nil {
		edges = append(edges, plan.EdgeAuthor)
	}
	if m.days != nil {
		edges = append(edges, plan.EdgeDays)
	}
	if m.arbitrarySections != nil {
		edges = append(edges, plan.EdgeArbitrarySections)
	}
	if m.header != nil {
		edges = append(edges, plan.EdgeHeader)
	}
	if m.prev != nil {
		edges = append(edges, plan.EdgePrev)
	}
	if m.next != nil {
		edges = append(edges, plan.EdgeNext)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case plan.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case plan.EdgeDays:
		ids := make([]ent.Value, 0, len(m.days))
		for id := range m.days {
			ids = append(ids, id)
		}
		return ids
	case plan.EdgeArbitrarySections:
		ids := make([]ent.Value, 0, len(m.arbitrarySections))
		for id := range m.arbitrarySections {
			ids = append(ids, id)
		}
		return ids
	case plan.EdgeHeader:
		if id := m.header; id != nil {
			return []ent.Value{*id}
		}
	case plan.EdgePrev:
		if id := m.prev; id != nil {
			return []ent.Value{*id}
		}
	case plan.EdgeNext:
		if id := m.next; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removeddays != nil {
		edges = append(edges, plan.EdgeDays)
	}
	if m.removedarbitrarySections != nil {
		edges = append(edges, plan.EdgeArbitrarySections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case plan.EdgeDays:
		ids := make([]ent.Value, 0, len(m.removeddays))
		for id := range m.removeddays {
			ids = append(ids, id)
		}
		return ids
	case plan.EdgeArbitrarySections:
		ids := make([]ent.Value, 0, len(m.removedarbitrarySections))
		for id := range m.removedarbitrarySections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedauthor {
		edges = append(edges, plan.EdgeAuthor)
	}
	if m.cleareddays {
		edges = append(edges, plan.EdgeDays)
	}
	if m.clearedarbitrarySections {
		edges = append(edges, plan.EdgeArbitrarySections)
	}
	if m.clearedheader {
		edges = append(edges, plan.EdgeHeader)
	}
	if m.clearedprev {
		edges = append(edges, plan.EdgePrev)
	}
	if m.clearednext {
		edges = append(edges, plan.EdgeNext)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlanMutation) EdgeCleared(name string) bool {
	switch name {
	case plan.EdgeAuthor:
		return m.clearedauthor
	case plan.EdgeDays:
		return m.cleareddays
	case plan.EdgeArbitrarySections:
		return m.clearedarbitrarySections
	case plan.EdgeHeader:
		return m.clearedheader
	case plan.EdgePrev:
		return m.clearedprev
	case plan.EdgeNext:
		return m.clearednext
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlanMutation) ClearEdge(name string) error {
	switch name {
	case plan.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case plan.EdgeHeader:
		m.ClearHeader()
		return nil
	case plan.EdgePrev:
		m.ClearPrev()
		return nil
	case plan.EdgeNext:
		m.ClearNext()
		return nil
	}
	return fmt.Errorf("unknown Plan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlanMutation) ResetEdge(name string) error {
	switch name {
	case plan.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case plan.EdgeDays:
		m.ResetDays()
		return nil
	case plan.EdgeArbitrarySections:
		m.ResetArbitrarySections()
		return nil
	case plan.EdgeHeader:
		m.ResetHeader()
		return nil
	case plan.EdgePrev:
		m.ResetPrev()
		return nil
	case plan.EdgeNext:
		m.ResetNext()
		return nil
	}
	return fmt.Errorf("unknown Plan edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	charm_id      *uuid.UUID
	name          *string
	email         *string
	bio           *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	plans         map[int]struct{}
	removedplans  map[int]struct{}
	clearedplans  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCharmID sets the "charm_id" field.
func (m *UserMutation) SetCharmID(u uuid.UUID) {
	m.charm_id = &u
}

// CharmID returns the value of the "charm_id" field in the mutation.
func (m *UserMutation) CharmID() (r uuid.UUID, exists bool) {
	v := m.charm_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCharmID returns the old "charm_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCharmID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCharmID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCharmID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCharmID: %w", err)
	}
	return oldValue.CharmID, nil
}

// ResetCharmID resets all changes to the "charm_id" field.
func (m *UserMutation) ResetCharmID() {
	m.charm_id = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetBio sets the "bio" field.
func (m *UserMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UserMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ClearBio clears the value of the "bio" field.
func (m *UserMutation) ClearBio() {
	m.bio = nil
	m.clearedFields[user.FieldBio] = struct{}{}
}

// BioCleared returns if the "bio" field was cleared in this mutation.
func (m *UserMutation) BioCleared() bool {
	_, ok := m.clearedFields[user.FieldBio]
	return ok
}

// ResetBio resets all changes to the "bio" field.
func (m *UserMutation) ResetBio() {
	m.bio = nil
	delete(m.clearedFields, user.FieldBio)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[user.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, user.FieldCreatedAt)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by ids.
func (m *UserMutation) AddPlanIDs(ids ...int) {
	if m.plans == nil {
		m.plans = make(map[int]struct{})
	}
	for i := range ids {
		m.plans[ids[i]] = struct{}{}
	}
}

// ClearPlans clears the "plans" edge to the Plan entity.
func (m *UserMutation) ClearPlans() {
	m.clearedplans = true
}

// PlansCleared reports if the "plans" edge to the Plan entity was cleared.
func (m *UserMutation) PlansCleared() bool {
	return m.clearedplans
}

// RemovePlanIDs removes the "plans" edge to the Plan entity by IDs.
func (m *UserMutation) RemovePlanIDs(ids ...int) {
	if m.removedplans == nil {
		m.removedplans = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.plans, ids[i])
		m.removedplans[ids[i]] = struct{}{}
	}
}

// RemovedPlans returns the removed IDs of the "plans" edge to the Plan entity.
func (m *UserMutation) RemovedPlansIDs() (ids []int) {
	for id := range m.removedplans {
		ids = append(ids, id)
	}
	return
}

// PlansIDs returns the "plans" edge IDs in the mutation.
func (m *UserMutation) PlansIDs() (ids []int) {
	for id := range m.plans {
		ids = append(ids, id)
	}
	return
}

// ResetPlans resets all changes to the "plans" edge.
func (m *UserMutation) ResetPlans() {
	m.plans = nil
	m.clearedplans = false
	m.removedplans = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.charm_id != nil {
		fields = append(fields, user.FieldCharmID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.bio != nil {
		fields = append(fields, user.FieldBio)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCharmID:
		return m.CharmID()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldBio:
		return m.Bio()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCharmID:
		return m.OldCharmID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldBio:
		return m.OldBio(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCharmID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCharmID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldBio) {
		fields = append(fields, user.FieldBio)
	}
	if m.FieldCleared(user.FieldCreatedAt) {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldBio:
		m.ClearBio()
		return nil
	case user.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCharmID:
		m.ResetCharmID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldBio:
		m.ResetBio()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.plans != nil {
		edges = append(edges, user.EdgePlans)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlans:
		ids := make([]ent.Value, 0, len(m.plans))
		for id := range m.plans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplans != nil {
		edges = append(edges, user.EdgePlans)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlans:
		ids := make([]ent.Value, 0, len(m.removedplans))
		for id := range m.removedplans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplans {
		edges = append(edges, user.EdgePlans)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePlans:
		return m.clearedplans
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePlans:
		m.ResetPlans()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
