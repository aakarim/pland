// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/aakarim/pland/ent/plan"
	"github.com/aakarim/pland/ent/user"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// HasConflict holds the value of the "has_conflict" field.
	HasConflict bool `json:"has_conflict,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// Txt holds the value of the "txt" field.
	Txt string `json:"txt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges      PlanEdges `json:"edges"`
	plan_next  *int
	user_plans *int
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Prev holds the value of the prev edge.
	Prev *Plan `json:"prev,omitempty"`
	// Next holds the value of the next edge.
	Next *Plan `json:"next,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// PrevOrErr returns the Prev value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) PrevOrErr() (*Plan, error) {
	if e.loadedTypes[1] {
		if e.Prev == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Prev, nil
	}
	return nil, &NotLoadedError{edge: "prev"}
}

// NextOrErr returns the Next value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) NextOrErr() (*Plan, error) {
	if e.loadedTypes[2] {
		if e.Next == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Next, nil
	}
	return nil, &NotLoadedError{edge: "next"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldHasConflict:
			values[i] = new(sql.NullBool)
		case plan.FieldID:
			values[i] = new(sql.NullInt64)
		case plan.FieldDigest, plan.FieldTxt:
			values[i] = new(sql.NullString)
		case plan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case plan.ForeignKeys[0]: // plan_next
			values[i] = new(sql.NullInt64)
		case plan.ForeignKeys[1]: // user_plans
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Plan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case plan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case plan.FieldHasConflict:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_conflict", values[i])
			} else if value.Valid {
				pl.HasConflict = value.Bool
			}
		case plan.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				pl.Digest = value.String
			}
		case plan.FieldTxt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txt", values[i])
			} else if value.Valid {
				pl.Txt = value.String
			}
		case plan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plan_next", value)
			} else if value.Valid {
				pl.plan_next = new(int)
				*pl.plan_next = int(value.Int64)
			}
		case plan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_plans", value)
			} else if value.Valid {
				pl.user_plans = new(int)
				*pl.user_plans = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Plan entity.
func (pl *Plan) QueryAuthor() *UserQuery {
	return (&PlanClient{config: pl.config}).QueryAuthor(pl)
}

// QueryPrev queries the "prev" edge of the Plan entity.
func (pl *Plan) QueryPrev() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryPrev(pl)
}

// QueryNext queries the "next" edge of the Plan entity.
func (pl *Plan) QueryNext() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryNext(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return (&PlanClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("has_conflict=")
	builder.WriteString(fmt.Sprintf("%v", pl.HasConflict))
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(pl.Digest)
	builder.WriteString(", ")
	builder.WriteString("txt=")
	builder.WriteString(pl.Txt)
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

func (pl Plans) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
