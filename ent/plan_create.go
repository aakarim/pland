// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aakarim/pland/ent/arbitrarysection"
	"github.com/aakarim/pland/ent/day"
	"github.com/aakarim/pland/ent/header"
	"github.com/aakarim/pland/ent/plan"
	"github.com/aakarim/pland/ent/user"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetHasConflict sets the "has_conflict" field.
func (pc *PlanCreate) SetHasConflict(b bool) *PlanCreate {
	pc.mutation.SetHasConflict(b)
	return pc
}

// SetNillableHasConflict sets the "has_conflict" field if the given value is not nil.
func (pc *PlanCreate) SetNillableHasConflict(b *bool) *PlanCreate {
	if b != nil {
		pc.SetHasConflict(*b)
	}
	return pc
}

// SetDigest sets the "digest" field.
func (pc *PlanCreate) SetDigest(s string) *PlanCreate {
	pc.mutation.SetDigest(s)
	return pc
}

// SetTxt sets the "txt" field.
func (pc *PlanCreate) SetTxt(s string) *PlanCreate {
	pc.mutation.SetTxt(s)
	return pc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (pc *PlanCreate) SetAuthorID(id int) *PlanCreate {
	pc.mutation.SetAuthorID(id)
	return pc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (pc *PlanCreate) SetNillableAuthorID(id *int) *PlanCreate {
	if id != nil {
		pc = pc.SetAuthorID(*id)
	}
	return pc
}

// SetAuthor sets the "author" edge to the User entity.
func (pc *PlanCreate) SetAuthor(u *User) *PlanCreate {
	return pc.SetAuthorID(u.ID)
}

// AddDayIDs adds the "days" edge to the Day entity by IDs.
func (pc *PlanCreate) AddDayIDs(ids ...int) *PlanCreate {
	pc.mutation.AddDayIDs(ids...)
	return pc
}

// AddDays adds the "days" edges to the Day entity.
func (pc *PlanCreate) AddDays(d ...*Day) *PlanCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDayIDs(ids...)
}

// AddArbitrarySectionIDs adds the "arbitrarySections" edge to the ArbitrarySection entity by IDs.
func (pc *PlanCreate) AddArbitrarySectionIDs(ids ...int) *PlanCreate {
	pc.mutation.AddArbitrarySectionIDs(ids...)
	return pc
}

// AddArbitrarySections adds the "arbitrarySections" edges to the ArbitrarySection entity.
func (pc *PlanCreate) AddArbitrarySections(a ...*ArbitrarySection) *PlanCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddArbitrarySectionIDs(ids...)
}

// SetHeaderID sets the "header" edge to the Header entity by ID.
func (pc *PlanCreate) SetHeaderID(id int) *PlanCreate {
	pc.mutation.SetHeaderID(id)
	return pc
}

// SetNillableHeaderID sets the "header" edge to the Header entity by ID if the given value is not nil.
func (pc *PlanCreate) SetNillableHeaderID(id *int) *PlanCreate {
	if id != nil {
		pc = pc.SetHeaderID(*id)
	}
	return pc
}

// SetHeader sets the "header" edge to the Header entity.
func (pc *PlanCreate) SetHeader(h *Header) *PlanCreate {
	return pc.SetHeaderID(h.ID)
}

// SetPrevID sets the "prev" edge to the Plan entity by ID.
func (pc *PlanCreate) SetPrevID(id int) *PlanCreate {
	pc.mutation.SetPrevID(id)
	return pc
}

// SetNillablePrevID sets the "prev" edge to the Plan entity by ID if the given value is not nil.
func (pc *PlanCreate) SetNillablePrevID(id *int) *PlanCreate {
	if id != nil {
		pc = pc.SetPrevID(*id)
	}
	return pc
}

// SetPrev sets the "prev" edge to the Plan entity.
func (pc *PlanCreate) SetPrev(p *Plan) *PlanCreate {
	return pc.SetPrevID(p.ID)
}

// SetNextID sets the "next" edge to the Plan entity by ID.
func (pc *PlanCreate) SetNextID(id int) *PlanCreate {
	pc.mutation.SetNextID(id)
	return pc
}

// SetNillableNextID sets the "next" edge to the Plan entity by ID if the given value is not nil.
func (pc *PlanCreate) SetNillableNextID(id *int) *PlanCreate {
	if id != nil {
		pc = pc.SetNextID(*id)
	}
	return pc
}

// SetNext sets the "next" edge to the Plan entity.
func (pc *PlanCreate) SetNext(p *Plan) *PlanCreate {
	return pc.SetNextID(p.ID)
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	var (
		err  error
		node *Plan
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Plan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.HasConflict(); !ok {
		v := plan.DefaultHasConflict
		pc.mutation.SetHasConflict(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.HasConflict(); !ok {
		return &ValidationError{Name: "has_conflict", err: errors.New(`ent: missing required field "Plan.has_conflict"`)}
	}
	if _, ok := pc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "Plan.digest"`)}
	}
	if _, ok := pc.mutation.Txt(); !ok {
		return &ValidationError{Name: "txt", err: errors.New(`ent: missing required field "Plan.txt"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.HasConflict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: plan.FieldHasConflict,
		})
		_node.HasConflict = value
	}
	if value, ok := pc.mutation.Digest(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldDigest,
		})
		_node.Digest = value
	}
	if value, ok := pc.mutation.Txt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldTxt,
		})
		_node.Txt = value
	}
	if nodes := pc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.AuthorTable,
			Columns: []string{plan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_plans = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.DaysTable,
			Columns: plan.DaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: day.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ArbitrarySectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ArbitrarySectionsTable,
			Columns: plan.ArbitrarySectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: arbitrarysection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.HeaderTable,
			Columns: []string{plan.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plan.PrevTable,
			Columns: []string{plan.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_next = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plan.NextTable,
			Columns: []string{plan.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	builders []*PlanCreate
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
