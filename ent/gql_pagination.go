// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/aakarim/pland/ent/arbitrarysection"
	"github.com/aakarim/pland/ent/day"
	"github.com/aakarim/pland/ent/header"
	"github.com/aakarim/pland/ent/plan"
	"github.com/aakarim/pland/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ArbitrarySectionEdge is the edge representation of ArbitrarySection.
type ArbitrarySectionEdge struct {
	Node   *ArbitrarySection `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// ArbitrarySectionConnection is the connection containing edges to ArbitrarySection.
type ArbitrarySectionConnection struct {
	Edges      []*ArbitrarySectionEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *ArbitrarySectionConnection) build(nodes []*ArbitrarySection, pager *arbitrarysectionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ArbitrarySection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ArbitrarySection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ArbitrarySection {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArbitrarySectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArbitrarySectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArbitrarySectionPaginateOption enables pagination customization.
type ArbitrarySectionPaginateOption func(*arbitrarysectionPager) error

// WithArbitrarySectionOrder configures pagination ordering.
func WithArbitrarySectionOrder(order *ArbitrarySectionOrder) ArbitrarySectionPaginateOption {
	if order == nil {
		order = DefaultArbitrarySectionOrder
	}
	o := *order
	return func(pager *arbitrarysectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArbitrarySectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArbitrarySectionFilter configures pagination filter.
func WithArbitrarySectionFilter(filter func(*ArbitrarySectionQuery) (*ArbitrarySectionQuery, error)) ArbitrarySectionPaginateOption {
	return func(pager *arbitrarysectionPager) error {
		if filter == nil {
			return errors.New("ArbitrarySectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type arbitrarysectionPager struct {
	order  *ArbitrarySectionOrder
	filter func(*ArbitrarySectionQuery) (*ArbitrarySectionQuery, error)
}

func newArbitrarySectionPager(opts []ArbitrarySectionPaginateOption) (*arbitrarysectionPager, error) {
	pager := &arbitrarysectionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArbitrarySectionOrder
	}
	return pager, nil
}

func (p *arbitrarysectionPager) applyFilter(query *ArbitrarySectionQuery) (*ArbitrarySectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *arbitrarysectionPager) toCursor(as *ArbitrarySection) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *arbitrarysectionPager) applyCursors(query *ArbitrarySectionQuery, after, before *Cursor) *ArbitrarySectionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultArbitrarySectionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *arbitrarysectionPager) applyOrder(query *ArbitrarySectionQuery, reverse bool) *ArbitrarySectionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultArbitrarySectionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultArbitrarySectionOrder.Field.field))
	}
	return query
}

func (p *arbitrarysectionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArbitrarySectionOrder.Field {
			b.Comma().Ident(DefaultArbitrarySectionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ArbitrarySection.
func (as *ArbitrarySectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArbitrarySectionPaginateOption,
) (*ArbitrarySectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArbitrarySectionPager(opts)
	if err != nil {
		return nil, err
	}
	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}
	conn := &ArbitrarySectionConnection{Edges: []*ArbitrarySectionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = as.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	as = pager.applyCursors(as, after, before)
	as = pager.applyOrder(as, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		as.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := as.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := as.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ArbitrarySectionOrderFieldCreatedAt orders ArbitrarySection by created_at.
	ArbitrarySectionOrderFieldCreatedAt = &ArbitrarySectionOrderField{
		field: arbitrarysection.FieldCreatedAt,
		toCursor: func(as *ArbitrarySection) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ArbitrarySectionOrderField) String() string {
	var str string
	switch f.field {
	case arbitrarysection.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ArbitrarySectionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ArbitrarySectionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ArbitrarySectionOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ArbitrarySectionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ArbitrarySectionOrderField", str)
	}
	return nil
}

// ArbitrarySectionOrderField defines the ordering field of ArbitrarySection.
type ArbitrarySectionOrderField struct {
	field    string
	toCursor func(*ArbitrarySection) Cursor
}

// ArbitrarySectionOrder defines the ordering of ArbitrarySection.
type ArbitrarySectionOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *ArbitrarySectionOrderField `json:"field"`
}

// DefaultArbitrarySectionOrder is the default ordering of ArbitrarySection.
var DefaultArbitrarySectionOrder = &ArbitrarySectionOrder{
	Direction: OrderDirectionAsc,
	Field: &ArbitrarySectionOrderField{
		field: arbitrarysection.FieldID,
		toCursor: func(as *ArbitrarySection) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts ArbitrarySection into ArbitrarySectionEdge.
func (as *ArbitrarySection) ToEdge(order *ArbitrarySectionOrder) *ArbitrarySectionEdge {
	if order == nil {
		order = DefaultArbitrarySectionOrder
	}
	return &ArbitrarySectionEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// DayEdge is the edge representation of Day.
type DayEdge struct {
	Node   *Day   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// DayConnection is the connection containing edges to Day.
type DayConnection struct {
	Edges      []*DayEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *DayConnection) build(nodes []*Day, pager *dayPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Day
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Day {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Day {
			return nodes[i]
		}
	}
	c.Edges = make([]*DayEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DayEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DayPaginateOption enables pagination customization.
type DayPaginateOption func(*dayPager) error

// WithDayOrder configures pagination ordering.
func WithDayOrder(order *DayOrder) DayPaginateOption {
	if order == nil {
		order = DefaultDayOrder
	}
	o := *order
	return func(pager *dayPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDayOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDayFilter configures pagination filter.
func WithDayFilter(filter func(*DayQuery) (*DayQuery, error)) DayPaginateOption {
	return func(pager *dayPager) error {
		if filter == nil {
			return errors.New("DayQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dayPager struct {
	order  *DayOrder
	filter func(*DayQuery) (*DayQuery, error)
}

func newDayPager(opts []DayPaginateOption) (*dayPager, error) {
	pager := &dayPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDayOrder
	}
	return pager, nil
}

func (p *dayPager) applyFilter(query *DayQuery) (*DayQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dayPager) toCursor(d *Day) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dayPager) applyCursors(query *DayQuery, after, before *Cursor) *DayQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDayOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dayPager) applyOrder(query *DayQuery, reverse bool) *DayQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDayOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDayOrder.Field.field))
	}
	return query
}

func (p *dayPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDayOrder.Field {
			b.Comma().Ident(DefaultDayOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Day.
func (d *DayQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DayPaginateOption,
) (*DayConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDayPager(opts)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DayConnection{Edges: []*DayEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = d.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DayOrderFieldCreatedAt orders Day by created_at.
	DayOrderFieldCreatedAt = &DayOrderField{
		field: day.FieldCreatedAt,
		toCursor: func(d *Day) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.CreatedAt,
			}
		},
	}
	// DayOrderFieldDate orders Day by date.
	DayOrderFieldDate = &DayOrderField{
		field: day.FieldDate,
		toCursor: func(d *Day) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.Date,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DayOrderField) String() string {
	var str string
	switch f.field {
	case day.FieldCreatedAt:
		str = "CREATED_AT"
	case day.FieldDate:
		str = "DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DayOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DayOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DayOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *DayOrderFieldCreatedAt
	case "DATE":
		*f = *DayOrderFieldDate
	default:
		return fmt.Errorf("%s is not a valid DayOrderField", str)
	}
	return nil
}

// DayOrderField defines the ordering field of Day.
type DayOrderField struct {
	field    string
	toCursor func(*Day) Cursor
}

// DayOrder defines the ordering of Day.
type DayOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *DayOrderField `json:"field"`
}

// DefaultDayOrder is the default ordering of Day.
var DefaultDayOrder = &DayOrder{
	Direction: OrderDirectionAsc,
	Field: &DayOrderField{
		field: day.FieldID,
		toCursor: func(d *Day) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Day into DayEdge.
func (d *Day) ToEdge(order *DayOrder) *DayEdge {
	if order == nil {
		order = DefaultDayOrder
	}
	return &DayEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// HeaderEdge is the edge representation of Header.
type HeaderEdge struct {
	Node   *Header `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// HeaderConnection is the connection containing edges to Header.
type HeaderConnection struct {
	Edges      []*HeaderEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *HeaderConnection) build(nodes []*Header, pager *headerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Header
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Header {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Header {
			return nodes[i]
		}
	}
	c.Edges = make([]*HeaderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HeaderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HeaderPaginateOption enables pagination customization.
type HeaderPaginateOption func(*headerPager) error

// WithHeaderOrder configures pagination ordering.
func WithHeaderOrder(order *HeaderOrder) HeaderPaginateOption {
	if order == nil {
		order = DefaultHeaderOrder
	}
	o := *order
	return func(pager *headerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHeaderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHeaderFilter configures pagination filter.
func WithHeaderFilter(filter func(*HeaderQuery) (*HeaderQuery, error)) HeaderPaginateOption {
	return func(pager *headerPager) error {
		if filter == nil {
			return errors.New("HeaderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type headerPager struct {
	order  *HeaderOrder
	filter func(*HeaderQuery) (*HeaderQuery, error)
}

func newHeaderPager(opts []HeaderPaginateOption) (*headerPager, error) {
	pager := &headerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHeaderOrder
	}
	return pager, nil
}

func (p *headerPager) applyFilter(query *HeaderQuery) (*HeaderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *headerPager) toCursor(h *Header) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *headerPager) applyCursors(query *HeaderQuery, after, before *Cursor) *HeaderQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHeaderOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *headerPager) applyOrder(query *HeaderQuery, reverse bool) *HeaderQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHeaderOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHeaderOrder.Field.field))
	}
	return query
}

func (p *headerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHeaderOrder.Field {
			b.Comma().Ident(DefaultHeaderOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Header.
func (h *HeaderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HeaderPaginateOption,
) (*HeaderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHeaderPager(opts)
	if err != nil {
		return nil, err
	}
	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}
	conn := &HeaderConnection{Edges: []*HeaderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = h.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	h = pager.applyCursors(h, after, before)
	h = pager.applyOrder(h, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		h.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := h.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := h.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// HeaderOrderFieldCreatedAt orders Header by created_at.
	HeaderOrderFieldCreatedAt = &HeaderOrderField{
		field: header.FieldCreatedAt,
		toCursor: func(h *Header) Cursor {
			return Cursor{
				ID:    h.ID,
				Value: h.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f HeaderOrderField) String() string {
	var str string
	switch f.field {
	case header.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f HeaderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *HeaderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("HeaderOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *HeaderOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid HeaderOrderField", str)
	}
	return nil
}

// HeaderOrderField defines the ordering field of Header.
type HeaderOrderField struct {
	field    string
	toCursor func(*Header) Cursor
}

// HeaderOrder defines the ordering of Header.
type HeaderOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *HeaderOrderField `json:"field"`
}

// DefaultHeaderOrder is the default ordering of Header.
var DefaultHeaderOrder = &HeaderOrder{
	Direction: OrderDirectionAsc,
	Field: &HeaderOrderField{
		field: header.FieldID,
		toCursor: func(h *Header) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts Header into HeaderEdge.
func (h *Header) ToEdge(order *HeaderOrder) *HeaderEdge {
	if order == nil {
		order = DefaultHeaderOrder
	}
	return &HeaderEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// PlanEdge is the edge representation of Plan.
type PlanEdge struct {
	Node   *Plan  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PlanConnection is the connection containing edges to Plan.
type PlanConnection struct {
	Edges      []*PlanEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PlanConnection) build(nodes []*Plan, pager *planPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Plan
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Plan {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Plan {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlanEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlanEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlanPaginateOption enables pagination customization.
type PlanPaginateOption func(*planPager) error

// WithPlanOrder configures pagination ordering.
func WithPlanOrder(order *PlanOrder) PlanPaginateOption {
	if order == nil {
		order = DefaultPlanOrder
	}
	o := *order
	return func(pager *planPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlanOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlanFilter configures pagination filter.
func WithPlanFilter(filter func(*PlanQuery) (*PlanQuery, error)) PlanPaginateOption {
	return func(pager *planPager) error {
		if filter == nil {
			return errors.New("PlanQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type planPager struct {
	order  *PlanOrder
	filter func(*PlanQuery) (*PlanQuery, error)
}

func newPlanPager(opts []PlanPaginateOption) (*planPager, error) {
	pager := &planPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlanOrder
	}
	return pager, nil
}

func (p *planPager) applyFilter(query *PlanQuery) (*PlanQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *planPager) toCursor(pl *Plan) Cursor {
	return p.order.Field.toCursor(pl)
}

func (p *planPager) applyCursors(query *PlanQuery, after, before *Cursor) *PlanQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPlanOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *planPager) applyOrder(query *PlanQuery, reverse bool) *PlanQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPlanOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPlanOrder.Field.field))
	}
	return query
}

func (p *planPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlanOrder.Field {
			b.Comma().Ident(DefaultPlanOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Plan.
func (pl *PlanQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlanPaginateOption,
) (*PlanConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlanPager(opts)
	if err != nil {
		return nil, err
	}
	if pl, err = pager.applyFilter(pl); err != nil {
		return nil, err
	}
	conn := &PlanConnection{Edges: []*PlanEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pl.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pl = pager.applyCursors(pl, after, before)
	pl = pager.applyOrder(pl, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pl.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PlanOrderFieldCreatedAt orders Plan by created_at.
	PlanOrderFieldCreatedAt = &PlanOrderField{
		field: plan.FieldCreatedAt,
		toCursor: func(pl *Plan) Cursor {
			return Cursor{
				ID:    pl.ID,
				Value: pl.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PlanOrderField) String() string {
	var str string
	switch f.field {
	case plan.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PlanOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PlanOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PlanOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PlanOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PlanOrderField", str)
	}
	return nil
}

// PlanOrderField defines the ordering field of Plan.
type PlanOrderField struct {
	field    string
	toCursor func(*Plan) Cursor
}

// PlanOrder defines the ordering of Plan.
type PlanOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PlanOrderField `json:"field"`
}

// DefaultPlanOrder is the default ordering of Plan.
var DefaultPlanOrder = &PlanOrder{
	Direction: OrderDirectionAsc,
	Field: &PlanOrderField{
		field: plan.FieldID,
		toCursor: func(pl *Plan) Cursor {
			return Cursor{ID: pl.ID}
		},
	},
}

// ToEdge converts Plan into PlanEdge.
func (pl *Plan) ToEdge(order *PlanOrder) *PlanEdge {
	if order == nil {
		order = DefaultPlanOrder
	}
	return &PlanEdge{
		Node:   pl,
		Cursor: order.Field.toCursor(pl),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
